# Xamarin.Android and Xamarin.iOS
# Build a Xamarin.Android and Xamarin.iOS app.
# Add steps that test, sign, and distribute the app, save build artifacts, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/xamarin

jobs:

- job: iOS
  pool:
    vmImage: 'macOS-10.15'
    
  variables:
  - group: 'iOS Signing And Provisioning'

  steps:
  # To manually select a Xamarin SDK version on the Hosted macOS agent, enable this script with the SDK version you want to target
  # https://go.microsoft.com/fwlink/?linkid=871629
  - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_4_1 
    displayName: 'Select Xamarin SDK version'
    enabled: false

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '**/*.sln'

  # Install Apple certificate
  # Install an Apple certificate required to build on a macOS agent machine
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: AwesomeApp.p12
      certPwd: '$(AwesomeApp.P12Password)'
      keychain: 'temp'

  # Install Apple provisioning profile
  # Install an Apple provisioning profile required to build on a macOS agent machine
  - task: InstallAppleProvisioningProfile@1
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: AwesomeApp.mobileprovision
      removeProfile: true

  - task: XamariniOS@2
    inputs:
      solutionFile: '**/*.iOS.csproj'
      signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
      signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'
      configuration: 'Release'
      packageApp: true
      args: /p:IpaPackageDir="$(Build.ArtifactStagingDirectory)"

  # Publish build artifacts
  # Publish build artifacts to Azure Pipelines or a Windows file share
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'IOS App' 
      publishLocation: 'Container'
      parallel: true
